// Applies a function to the stack.
def @ (.r (.r -> .s) -> .s):
  apply

// Applies a function to the stack.
def apply (.r (.r -> .s) -> .s):
  __apply

// Applies a function to the left branch of a choice.
def choice (.r (a | b) (.r a -> .r) -> .r):
  __choice

// Applies one of two functions to the branches of a choice.
def choice_else (.r (a | b) (.r a -> .s) (.r b -> .s) -> .s):
  __choice_else

// Applies a function if a condition is met.
def if (.r Bool (.r -> .r) -> .r):
  __if

// Applies one of two functions according to a condition.
def if_else (.r Bool (.r -> .s) (.r -> .s) -> .s):
  __if_else

// Applies a function to the value of some option.
def option (.r a? (.r a -> .r) -> .r):
  __option

// Applies a function to the value of some option, or else a
// default function.
def option_else (.r a? (.r a -> .s) (.r -> .s) -> .s):
  __option_else

/*
// 'cond' accepts a value, a vector of patterns, and a
// default function. A pattern consists of a matching
// function and a body. Each matching function is attempted
// in turn; the body corresponding to the first match to
// return 'some' value is evaluated. If all of the matches
// returned 'none', then 'cond' evaluates the default.
def cond (
  a                          // Matched value
  [(a -> b?) & (b -> c)]  // (pattern, function) pairs
  (-> c)                  // default function
  ->
  c
):
  -> { x ps z }
  \option ps head:
    -> p
    x (p first)@ -> m
    \option m:
      p rest @
    else:
      x (ps tail) z cond
  else:
    z@

// 'cond' without a default.
def cond1 (
  a
  [(a -> b?) & (b -> c)]
  ->
  c
):
  -> { x ps }
  ps head fromSome -> p
  x (p first)@ -> m
  \option m:
    p rest @
  else:
    x (ps tail) cond1
*/

/*
// Repeats an action until a condition is false.
def loopWhile ((-> Bool) ->):
  -> f
  \if f@: f loopWhile
*/

/*
// Iterates a function on a value until a predicate holds.
def until (a (a -> a) (a -> Bool) -> a):
  -> { x f p }
  \if x p@:
    x
  else:
    x f@
    f p until
*/
